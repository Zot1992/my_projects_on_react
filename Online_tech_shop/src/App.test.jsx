import { render, screen, fireEvent, waitFor, within } from '@testing-library/react'
import { describe, expect, test, vi } from 'vitest'
import DesktopVersion from './components/DesktopVersion/DesktopVersion';
import MobileVersion from './components/MobileVersion/MobileVersion';
import FilterSetBar from './components/FilterSetBar/FilterSetBar';
import Header from './components/Header/Header';
import { categories } from "./data/products"
import ProductCart from './components/ProductCart/ProductCart';
import SearchBar from './components/SearchBar/SearchBar';
import ShoppingCart from './components/ShoppingCart/ShoppingCart';
import Favorites from './components/Favorites/Favorites';

test('–†–µ–Ω–¥–µ—Ä–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±–µ–∑ –æ—à–∏–±–æ–∫', () => {
  const mockProps = {
    openCart: vi.fn(),
    handleAddToCart: vi.fn(),
    openFavorites: vi.fn(),
    isCartOpen: false,
    isFavoritesOpen: false,
    closeCart: vi.fn(),
    closeFavorites: vi.fn(),
    cardItems: [],
    favoriteItems: [],
    removeFromCard: vi.fn(),
    removeFromFavorite: vi.fn(),
    isPromoCode: false,
    calculateTotal: vi.fn(),
    getPromoCode: vi.fn(),
    cleaningShoppingCart: vi.fn(),
    cleaningFavoritest: vi.fn(),
    searchQuery: '',
    setSearchQuery: vi.fn(),
    searchResults: [],
    handleSearchResultsClick: vi.fn(),
    selectedCategory: '',
    setSelectedCategory: vi.fn(),
    handleCategoryClick: vi.fn(),
    handleBrandClick: vi.fn(),
    handlePriceClick: vi.fn(),
    filtres: {},
    setFiltres: vi.fn(),
    isOnClickCategory: false,
    isOnClickBrand: false,
    isOnClickPrice: false,
    filter: vi.fn(),
    filteredProducts: [],
    filteredBrands: [],
    filteredPrices: [],
    getFilteredCount: vi.fn(() => 0),
    messages: []
  };

  render(<DesktopVersion {...mockProps} />);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  expect(screen.getByTestId('search-bar')).toBeInTheDocument();
  expect(screen.getByTestId('cart-button')).toBeInTheDocument();
  expect(screen.getByTestId('favorites-button')).toBeInTheDocument();
  expect(screen.getByTestId('header')).toBeInTheDocument();
  expect(screen.getByTestId('filter-set-bar')).toBeInTheDocument();
});

test('–†–µ–Ω–¥–µ—Ä–∏—Ç –ø–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±–µ–∑ –æ—à–∏–±–æ–∫', () => {
  const mockProps = {
    filtres: {
      maxPrice: 10000,
      brand: []
    },
    onFiltresChange: vi.fn(),
    checkBrandClick: vi.fn(),
    checkPriceClick: vi.fn()
  };

  render(<FilterSetBar {...mockProps} />);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  expect(screen.getByText(/–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:/i)).toBeInTheDocument();
  expect(screen.getByRole('slider')).toBeInTheDocument();

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º data-testid –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã
  const priceDisplay = screen.getByTestId('price-display');

  // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  const formattedPrice = new Intl.NumberFormat('ru-RU').format(10000);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  expect(priceDisplay.textContent).toBe(`${formattedPrice} ‚ÇΩ`);

  expect(screen.getByText(/–ë—Ä–µ–Ω–¥—ã:/i)).toBeInTheDocument();
});

test('–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å–ª–∞–π–¥–µ—Ä–∞ —Ü–µ–Ω—ã', async () => {
  const mockProps = {
    filtres: {
      maxPrice: 10000,
      brand: []
    },
    onFiltresChange: vi.fn(),
    checkBrandClick: vi.fn(),
    checkPriceClick: vi.fn()
  };

  render(<FilterSetBar {...mockProps} />);

  const slider = screen.getByRole('slider');

  // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å–ª–∞–π–¥–µ—Ä–∞
  fireEvent.change(slider, { target: { value: 50000 } });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–ª–±–µ–∫ –≤—ã–∑–≤–∞–ª—Å—è —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
  expect(mockProps.onFiltresChange).toHaveBeenCalledWith({
    maxPrice: 50000,
    brand: []
  });
  expect(mockProps.checkPriceClick).toHaveBeenCalledTimes(1);

  // üí° –ü—Ä–æ–≤–µ—Ä—è–µ–º DOM –Ω–µ –Ω–∞–ø—Ä—è–º—É—é, –∞ —á–µ—Ä–µ–∑ –º–æ–∫:
  await waitFor(() => {
    expect(mockProps.onFiltresChange).toHaveBeenCalled();
  });
});

test('–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±—Ä–µ–Ω–¥–æ–≤', async () => {
  const mockProps = {
    filtres: {
      maxPrice: 10000,
      brand: ['Apple']
    },
    onFiltresChange: vi.fn(),
    checkBrandClick: vi.fn(),
    checkPriceClick: vi.fn()
  };

  const products = [
    { brand: 'Apple' },
    { brand: 'Samsung' }
  ];

  render(<FilterSetBar {...mockProps} products={products} />);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤
  const appleCheckbox = await screen.findByRole('checkbox', {
    name: /Apple/i
  });
  expect(appleCheckbox.checked).toBe(true);

  const samsungCheckbox = await screen.findByRole('checkbox', {
    name: /Samsung/i
  });
  expect(samsungCheckbox.checked).toBe(false);

  fireEvent.click(samsungCheckbox);
  expect(mockProps.onFiltresChange).toHaveBeenCalledTimes(1);
  expect(mockProps.checkBrandClick).toHaveBeenCalledTimes(1);
});

test('–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤', () => {
  const mockProps = {
    filtres: {
      maxPrice: 10000,
      brand: []
    },
    onFiltresChange: vi.fn(),
    checkBrandClick: vi.fn(),
    checkPriceClick: vi.fn()
  };

  // –ü—Ä–æ–¥—É–∫—Ç—ã —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –±—Ä–µ–Ω–¥–∞–º–∏
  const products = [
    { brand: 'Apple' },
    { brand: 'Apple' },
    { brand: 'Samsung' },
    { brand: 'Samsung' }
  ];

  render(<FilterSetBar {...mockProps} products={products} />);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–µ–Ω–¥—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω–æ
  expect(screen.getAllByText(/Apple/i).length).toBe(1);
  expect(screen.getAllByText(/Samsung/i).length).toBe(1);
});

describe('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MobileVersion', () => {
  const mockProps = {
    openCart: vi.fn(),
    handleAddToCart: vi.fn(),
    openFavorites: vi.fn(),
    isCartOpen: false,
    isFavoritesOpen: false,
    closeCart: vi.fn(),
    closeFavorites: vi.fn(),
    cardItems: [],
    favoriteItems: [],
    removeFromCard: vi.fn(),
    removeFromFavorite: vi.fn(),
    isPromoCode: false,
    calculateTotal: vi.fn(() => ({
      subTotal: 10000,
      newPrice: 9000,
      total: 9000
    })),
    getPromoCode: vi.fn(),
    cleaningShoppingCart: vi.fn(),
    cleaningFavoritest: vi.fn(),
    searchQuery: '',
    setSearchQuery: vi.fn(),
    searchResults: [],
    handleSearchResultsClick: vi.fn(),
    selectedCategory: '',
    setSelectedCategory: vi.fn(),
    handleCategoryClick: vi.fn(),
    handleBrandClick: vi.fn(),
    handlePriceClick: vi.fn(),
    filtres: {},
    setFiltres: vi.fn(),
    isOnClickCategory: false,
    isOnClickBrand: false,
    isOnClickPrice: false,
    filter: vi.fn(),
    filteredProducts: [],
    filteredBrands: [],
    filteredPrices: [],
    getFilteredCount: vi.fn(() => 0),
    messages: []
  }


  test('–†–µ–Ω–¥–µ—Ä–∏—Ç MobileVersion –±–µ–∑ –æ—à–∏–±–æ–∫', () => {
    render(<MobileVersion {...mockProps} />)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å—Ç—å
    expect(screen.getByTestId('cart-button')).toBeInTheDocument()
    expect(screen.getByTestId('favorites-button')).toBeInTheDocument()
    expect(screen.getByTestId('search-bar')).toBeInTheDocument()
    expect(screen.getByTestId('header')).toBeInTheDocument()
    expect(screen.getByTestId('filter-set-bar')).toBeInTheDocument()
  })

  test('–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –≤—ã–∑—ã–≤–∞–µ—Ç openCart', () => {
    render(<MobileVersion {...mockProps} />)

    const cartButton = screen.getByTestId('cart-button')
    fireEvent.click(cartButton)

    expect(mockProps.openCart).toHaveBeenCalledTimes(1)
  })

  test('–û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—ã–∑—ã–≤–∞–µ—Ç openFavorites', () => {
    render(<MobileVersion {...mockProps} />)

    const favoritesButton = screen.getByTestId('favorites-button')
    fireEvent.click(favoritesButton)

    expect(mockProps.openFavorites).toHaveBeenCalledTimes(1)
  })

  test('–†–µ–Ω–¥–µ—Ä–∏—Ç –º–æ–¥–∞–ª–∫—É –∫–æ—Ä–∑–∏–Ω—ã, –µ—Å–ª–∏ isCartOpen = true', () => {
    render(<MobileVersion {...mockProps} isCartOpen={true} />)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    expect(screen.getByRole('heading', { name: /–ö–æ—Ä–∑–∏–Ω–∞/i })).toBeInTheDocument()
  })

  test('–†–µ–Ω–¥–µ—Ä–∏—Ç –º–æ–¥–∞–ª–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ, –µ—Å–ª–∏ isFavoritesOpen = true', () => {
    render(<MobileVersion {...mockProps} isFavoritesOpen={true} />)

    expect(screen.getByRole('heading', { name: /–ò–∑–±—Ä–∞–Ω–Ω–æ–µ/i })).toBeInTheDocument()
  })

  test('–ü—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–∏—Å–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è setSearchQuery', () => {
    render(<MobileVersion {...mockProps} />)

    const searchInput = screen.getByPlaceholderText(/–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤/i)
    fireEvent.change(searchInput, { target: { value: 'iPhone' } })

    expect(mockProps.setSearchQuery).toHaveBeenCalledWith('iPhone')
  })

  test('–ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–µ–Ω–¥–µ—Ä—è—Ç—Å—è –∏ –≤—ã–∑—ã–≤–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏', () => {
    render(<MobileVersion {...mockProps} />)

    const categoryButtons = screen.getAllByRole('button', { name: /–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã|–ù–æ—É—Ç–±—É–∫–∏/i })
    expect(categoryButtons.length).toBeGreaterThan(0)

    fireEvent.click(categoryButtons[0])
    expect(mockProps.setSelectedCategory).toHaveBeenCalled()
    expect(mockProps.handleCategoryClick).toHaveBeenCalled()
  })


  test('–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏ isFavoritesOpen = false', () => {
    const { rerender } = render(<MobileVersion {...mockProps} isFavoritesOpen={true} />)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å—Ç—å
    expect(screen.getByRole('heading', { name: /–ò–∑–±—Ä–∞–Ω–Ω–æ–µ/i })).toBeInTheDocument()

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å isFavoritesOpen = false
    rerender(<MobileVersion {...mockProps} isFavoritesOpen={false} />)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏—Å—á–µ–∑–ª–æ
    expect(screen.queryByRole('heading', { name: /–ò–∑–±—Ä–∞–Ω–Ω–æ–µ/i })).toBeNull()
  })
})

describe("Header component", () => {
  it("—Ä–µ–Ω–¥–µ—Ä–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ TechStore", () => {
    render(<Header onCategoryChange={() => { }} checkCategoryClick={() => { }} />)
    expect(screen.getByText("TechStore")).toBeInTheDocument()
  })

  it("—Ä–µ–Ω–¥–µ—Ä–∏—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ data/products", () => {
    render(<Header onCategoryChange={() => { }} checkCategoryClick={() => { }} />)

    categories.forEach(category => {
      expect(screen.getByText(category.name)).toBeInTheDocument()
    })
  })

  it("–≤—ã–∑—ã–≤–∞–µ—Ç onCategoryChange –∏ checkCategoryClick –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", () => {
    const onCategoryChange = vi.fn()
    const checkCategoryClick = vi.fn()

    render(
      <Header
        onCategoryChange={onCategoryChange}
        checkCategoryClick={checkCategoryClick}
      />
    )

    const firstCategoryButton = screen.getByText(categories[0].name)
    fireEvent.click(firstCategoryButton)

    expect(onCategoryChange).toHaveBeenCalledWith(categories[0].id)
    expect(checkCategoryClick).toHaveBeenCalled()
  })
})

describe("ProductCart component", () => {
  const mockProduct = {
    id: 1,
    name: "iPhone 15 Pro",
    price: 129990,
    inStock: 5,
    image: "https://example.com/iphone.jpg"
  }

  const onAddToCart = vi.fn()
  const onToggleFavorite = vi.fn()

  beforeEach(() => {
    vi.clearAllMocks()
  })

  it("—Ä–µ–Ω–¥–µ—Ä–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ", () => {
    render(
      <ProductCart
        product={mockProduct}
        onAddToCart={onAddToCart}
        onToggleFavorite={onToggleFavorite}
      />
    )

    expect(screen.getByText(mockProduct.name)).toBeInTheDocument()
    expect(screen.getByText(/‚ÇΩ/)).toBeInTheDocument()
    expect(screen.getByText(/–í –Ω–∞–ª–∏—á–∏–∏:/)).toHaveTextContent(
      `–í –Ω–∞–ª–∏—á–∏–∏:${mockProduct.inStock}—à—Ç.`
    )
  })

  it("—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏ —É–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞", () => {
    render(
      <ProductCart
        product={mockProduct}
        onAddToCart={onAddToCart}
        onToggleFavorite={onToggleFavorite}
      />
    )

    const plusButton = screen.getByText("+")
    const minusButton = screen.getByText("-")

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é quantity = 1
    expect(screen.getByText(/–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:/)).toHaveTextContent("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1")

    // –ù–∞–∂–∏–º–∞–µ–º +
    fireEvent.click(plusButton)
    expect(screen.getByText(/–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:/)).toHaveTextContent("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 2")

    // –ù–∞–∂–∏–º–∞–µ–º -
    fireEvent.click(minusButton)
    expect(screen.getByText(/–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:/)).toHaveTextContent("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1")
  })

  it("–Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—à–µ, —á–µ–º inStock", () => {
    render(
      <ProductCart
        product={mockProduct}
        onAddToCart={onAddToCart}
        onToggleFavorite={onToggleFavorite}
      />
    )

    const plusButton = screen.getByText("+")

    // –ñ–º–µ–º + –¥–æ –º–∞–∫—Å–∏–º—É–º–∞
    for (let i = 0; i < 10; i++) fireEvent.click(plusButton)

    // –î–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è 5
    expect(screen.getByText(/–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:/)).toHaveTextContent("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 5")
  })

  it("–Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∏–∂–µ 1", () => {
    render(
      <ProductCart
        product={mockProduct}
        onAddToCart={onAddToCart}
        onToggleFavorite={onToggleFavorite}
      />
    )

    const minusButton = screen.getByText("-")
    fireEvent.click(minusButton)
    expect(screen.getByText(/–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:/)).toHaveTextContent("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1")
  })

  it("–≤—ã–∑—ã–≤–∞–µ—Ç onAddToCart —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏", () => {
    render(
      <ProductCart
        product={mockProduct}
        onAddToCart={onAddToCart}
        onToggleFavorite={onToggleFavorite}
      />
    )

    const addButton = screen.getAllByRole("button")[2] // 3-—è –∫–Ω–æ–ø–∫–∞ ‚Äî "–¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
    fireEvent.click(addButton)

    expect(onAddToCart).toHaveBeenCalledWith(mockProduct, 1)
  })

  it("–≤—ã–∑—ã–≤–∞–µ—Ç onToggleFavorite –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", () => {
    render(
      <ProductCart
        product={mockProduct}
        onAddToCart={onAddToCart}
        onToggleFavorite={onToggleFavorite}
      />
    )

    const favoriteButton = screen.getAllByRole("button")[3] // 4-—è –∫–Ω–æ–ø–∫–∞ ‚Äî –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    fireEvent.click(favoriteButton)

    expect(onToggleFavorite).toHaveBeenCalledWith(mockProduct)
  })
})

describe("SearchBar component", () => {
  const mockSearchChange = vi.fn()
  const mockResultClick = vi.fn()

  const mockResults = [
    { id: 1, name: "iPhone 15", brand: "Apple", price: 120000, image: "iphone.jpg" },
    { id: 2, name: "Galaxy S24", brand: "Samsung", price: 110000, image: "galaxy.jpg" },
  ]

  beforeEach(() => {
    vi.clearAllMocks()
  })

  it("—Ä–µ–Ω–¥–µ—Ä–∏—Ç –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞", () => {
    render(
      <SearchBar
        searchQuery=""
        onSearchChange={mockSearchChange}
        searchResults={[]}
        onSearchResultClick={mockResultClick}
      />
    )

    const input = screen.getByTestId("search-bar")
    expect(input).toBeInTheDocument()
    expect(input.placeholder).toBe("–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤")
  })

  it("—Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç onSearchChange", () => {
    render(
      <SearchBar
        searchQuery=""
        onSearchChange={mockSearchChange}
        searchResults={[]}
        onSearchResultClick={mockResultClick}
      />
    )

    const input = screen.getByTestId("search-bar")
    fireEvent.change(input, { target: { value: "iphone" } })

    expect(mockSearchChange).toHaveBeenCalledWith("iphone")
  })

  it("–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å", () => {
    render(
      <SearchBar
        searchQuery="iphone"
        onSearchChange={mockSearchChange}
        searchResults={mockResults}
        onSearchResultClick={mockResultClick}
      />
    )

    const input = screen.getByTestId("search-bar")
    fireEvent.focus(input) // <--- –¥–æ–±–∞–≤—å —ç—Ç–æ

    expect(screen.getByTestId("search-results")).toBeInTheDocument()

    const items = screen.getAllByTestId("search-result-item")
    expect(items.length).toBe(2)
    expect(screen.getByText("iPhone 15")).toBeInTheDocument()
  })

  it("–≤—ã–∑—ã–≤–∞–µ—Ç onSearchResultClick –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç", () => {
    render(
      <SearchBar
        searchQuery="iphone"
        onSearchChange={mockSearchChange}
        searchResults={mockResults}
        onSearchResultClick={mockResultClick}
      />
    )

    const input = screen.getByTestId("search-bar")
    fireEvent.focus(input) // <--- –¥–æ–±–∞–≤—å —ç—Ç–æ

    const firstResult = screen.getAllByTestId("search-result-item")[0]
    fireEvent.mouseDown(firstResult) // –∏–ª–∏ fireEvent.click(firstResult)

    expect(mockResultClick).toHaveBeenCalledWith(mockResults[0])
  })
})

describe('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ShoppingCart', () => {
  const mockCardItems = [
    {
      id: 1,
      image: 'test.jpg',
      quantity: 2,
      product: { name: 'iPhone 15', price: 1000 },
    },
  ]

  const mockProps = {
    cardItems: mockCardItems,
    removeFromCard: vi.fn(),
    isPromoCode: false,
    calculateTotal: vi.fn(() => ({
      subTotal: 2000,
      newPrice: 1800,
      total: 1800,
    })),
    getPromoCode: vi.fn(),
    cleaningShoppingCart: vi.fn(),
    setPromoCode: vi.fn(),
  }

  beforeEach(() => {
    vi.clearAllMocks()
  })

  test('–†–µ–Ω–¥–µ—Ä–∏—Ç –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É', () => {
    render(<ShoppingCart {...mockProps} cardItems={[]} />)

    expect(screen.getByText(/–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞/i)).toBeInTheDocument()
    expect(mockProps.calculateTotal).toHaveBeenCalled()
  })

  test('–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ', () => {
    render(<ShoppingCart {...mockProps} />)

    expect(screen.getByText(/iPhone 15/i)).toBeInTheDocument()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑
    const prices = screen.getAllByText(/2000 ‚ÇΩ/i)
    expect(prices.length).toBeGreaterThan(0)
  })

  test('–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤—ã–∑—ã–≤–∞–µ—Ç removeFromCard', () => {
    render(<ShoppingCart {...mockProps} />)

    const removeButton = screen.getByRole('button', { name: '' })
    fireEvent.click(removeButton)

    expect(mockProps.removeFromCard).toHaveBeenCalledWith(1)
  })

  test('–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—É–º–º—É –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞', () => {
    render(<ShoppingCart {...mockProps} isPromoCode={false} />)

    const totalTexts = screen.getAllByText(/–û–±—â–∞—è —Å—É–º–º–∞/i)
    expect(totalTexts.length).toBeGreaterThan(0)

    expect(screen.getAllByText(/2000 ‚ÇΩ/i).length).toBeGreaterThan(0)
  })

  test('–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—É–º–º—É —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º', () => {
    render(<ShoppingCart {...mockProps} isPromoCode={true} />)

    const totalTexts = screen.getAllByText(/–û–±—â–∞—è —Å—É–º–º–∞/i)
    expect(totalTexts.length).toBeGreaterThan(0)

    expect(screen.getAllByText(/1800 ‚ÇΩ/i).length).toBeGreaterThan(0)
    expect(screen.getAllByText(/–í–∞—à–∞ —Å–∫–∏–¥–∫–∞/i).length).toBeGreaterThan(0)
  })

  test('–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –∫–ª–∏–∫ –≤—ã–∑—ã–≤–∞–µ—Ç getPromoCode', () => {
    render(<ShoppingCart {...mockProps} />)

    const input = screen.getByPlaceholderText(/–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥/i)
    const button = screen.getByText(/–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥/i)

    fireEvent.change(input, { target: { value: 'SALE2025' } })
    fireEvent.click(button)

    expect(mockProps.getPromoCode).toHaveBeenCalledWith('SALE2025')
  })

  test('–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –≤—ã–∑—ã–≤–∞–µ—Ç cleaningShoppingCart', () => {
    render(<ShoppingCart {...mockProps} />)

    const clearButton = screen.getByText(/–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É/i)
    fireEvent.click(clearButton)

    expect(mockProps.cleaningShoppingCart).toHaveBeenCalledTimes(1)
  })
})

describe("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Favorites", () => {
  const mockRemoveFromFavorite = vi.fn()
  const mockOpenCart = vi.fn()
  const mockOnAddToCart = vi.fn()
  const mockCleaningFavorites = vi.fn()

  const mockItems = [
    {
      id: 1,
      image: "test.jpg",
      product: { name: "iPhone 15", price: 2000 },
    },
    {
      id: 2,
      image: "test2.jpg",
      product: { name: "MacBook Air", price: 3000 },
    },
  ]

  beforeEach(() => {
    vi.clearAllMocks()
  })

  test("–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç", () => {
    render(
      <Favorites
        favoriteItems={[]}
        removeFromFavorite={mockRemoveFromFavorite}
        openCart={mockOpenCart}
        onAddToCart={mockOnAddToCart}
        cleaningFavorites={mockCleaningFavorites}
      />
    )

    expect(
      screen.getByText(/–≤ —Å–ø–∏—Å–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞/i)
    ).toBeInTheDocument()
  })

  test("–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏ –æ–±—â—É—é —Å—É–º–º—É", () => {
    render(
      <Favorites
        favoriteItems={mockItems}
        removeFromFavorite={mockRemoveFromFavorite}
        openCart={mockOpenCart}
        onAddToCart={mockOnAddToCart}
        cleaningFavorites={mockCleaningFavorites}
      />
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    expect(screen.getByText(/iPhone 15/i)).toBeInTheDocument()
    expect(screen.getByText(/MacBook Air/i)).toBeInTheDocument()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑
    const prices = screen.getAllByText(/‚ÇΩ/i)
    expect(prices.length).toBeGreaterThan(0)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    const totalBlocks = screen.getAllByText(/–û–±—â–∞—è —Å—É–º–º–∞/i)
    expect(totalBlocks.length).toBeGreaterThan(0)

    const container = totalBlocks[0].closest("p")
    expect(within(container).getByText(/5000 ‚ÇΩ/i)).toBeInTheDocument()
  })

  test("–†–∞–±–æ—Ç–∞—é—Ç –∫–Ω–æ–ø–∫–∏: —É–¥–∞–ª–∏—Ç—å, –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—á–∏—Å—Ç–∏—Ç—å", () => {
    render(
      <Favorites
        favoriteItems={mockItems}
        removeFromFavorite={mockRemoveFromFavorite}
        openCart={mockOpenCart}
        onAddToCart={mockOnAddToCart}
        cleaningFavorites={mockCleaningFavorites}
      />
    )

    // –£–¥–∞–ª–µ–Ω–∏–µ
    const removeButtons = screen.getAllByRole("button", { name: "" })
    fireEvent.click(removeButtons[0])
    expect(mockRemoveFromFavorite).toHaveBeenCalledTimes(1)

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
    fireEvent.click(removeButtons[1])
    expect(mockOnAddToCart).toHaveBeenCalledTimes(1)

    // –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É
    fireEvent.click(screen.getByText(/–ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É/i))
    expect(mockOpenCart).toHaveBeenCalledTimes(1)

    // –û—á–∏—Å—Ç–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    fireEvent.click(screen.getByText(/–æ—á–∏—Å—Ç–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ/i))
    expect(mockCleaningFavorites).toHaveBeenCalledTimes(1)
  })
})